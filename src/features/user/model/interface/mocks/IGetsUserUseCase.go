// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	context "context"
	response "main/features/user/model/response"

	mock "github.com/stretchr/testify/mock"
)

// IGetsUserUseCase is an autogenerated mock type for the IGetsUserUseCase type
type IGetsUserUseCase struct {
	mock.Mock
}

// Gets provides a mock function with given fields: c
func (_m *IGetsUserUseCase) Gets(c context.Context) (response.ResGetsUser, error) {
	ret := _m.Called(c)

	var r0 response.ResGetsUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (response.ResGetsUser, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) response.ResGetsUser); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(response.ResGetsUser)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIGetsUserUseCase creates a new instance of IGetsUserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIGetsUserUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IGetsUserUseCase {
	mock := &IGetsUserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
