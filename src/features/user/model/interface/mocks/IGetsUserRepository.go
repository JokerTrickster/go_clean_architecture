// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	context "context"
	mongodb "main/common/db/mongodb"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// IGetsUserRepository is an autogenerated mock type for the IGetsUserRepository type
type IGetsUserRepository struct {
	mock.Mock
}

// CountUser provides a mock function with given fields: ctx, query
func (_m *IGetsUserRepository) CountUser(ctx context.Context, query primitive.D) (int32, error) {
	ret := _m.Called(ctx, query)

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.D) (int32, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.D) int32); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.D) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUser provides a mock function with given fields: ctx, query
func (_m *IGetsUserRepository) FindUser(ctx context.Context, query primitive.D) ([]mongodb.UserDTO, error) {
	ret := _m.Called(ctx, query)

	var r0 []mongodb.UserDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.D) ([]mongodb.UserDTO, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.D) []mongodb.UserDTO); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mongodb.UserDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.D) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIGetsUserRepository creates a new instance of IGetsUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIGetsUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IGetsUserRepository {
	mock := &IGetsUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
